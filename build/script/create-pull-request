#!/usr/bin/env node
'use strict'

const resolve = require('path').resolve
const { execSync } = require('child_process');

const meow = require('meow')
const { Octokit, App } = require('octokit');
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const Green = '\u001b[0;32m'
const Yellow = '\u001b[1;33m'
const Red = '\u001b[0;31m'
const NC = '\u001b[0m'

const cli = meow(`
${Yellow}Description${NC}
    Create a pull request on the github repository on the requested branch.
    Default branch: main

${Yellow}Usage${NC}
    ./create-pull-request

${Yellow}Options${NC}
    ${Green}-b, --base${NC}          The base branch to merge into for the pull request. ${Yellow}[Default: main]
    ${Green}-h, --head${NC}          The branch to compare against the base branch. ${Yellow}[Default: The current branch]
`, {
    booleanDefault: undefined,
    flags: {
        base: {
            alias: 'b',
            type: 'string',
            default: 'main'
        },
        head: {
            alias: 'h',
            type: 'string'
        }
    }
})

if (!process.env.GITHUB_TOKEN) {
    console.error(`${Red}ERROR:${NC} Please provide a personal access token for the ${Yellow}GITHUB_TOKEN${NC} environment variable`)
    return
}

const flags = cli.flags;
const base = cli.flags.base;
const head = cli.flags.head || getCurrentBranch();
const changelog = getChangelog(base)

createPullRequest(base, head, changelog)

async function createPullRequest(base, head, changelog) {
    // Create a personal access token at https://github.com/settings/tokens/new?scopes=repo
    const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

    // Compare: https://docs.github.com/en/rest/reference/users#get-the-authenticated-user
    const {
        data: { login },
    } = await octokit.rest.users.getAuthenticated();
    console.log(`${Green}Logged in as :${NC} %s`, login);

    if (!login) {
        console.error(`${Red}ERROR:${NC} Could not log in with the personal access token provided`)
        return
    }

    const pullRequestMessage = `Merging ${head} into ${base} \n\n${changelog}`
    const question = `${Yellow}Creating a pull request with the current message :${NC} \n\n${pullRequestMessage} \n\nProceed ? ${Yellow}[Y/n]`

    rl.question(question, async (answer) => {
        if (answer.toLocaleLowerCase() === 'n') {
            console.error(`${Red}Aborting pull request...`)
            process.exit(0);
        }
        rl.close();

        console.log(`${Green}Creating pull request...`)
        console.log(head)

        const response = await octokit.rest.pulls.create({
            owner: "charcoalphp",
            repo: "charcoal",
            title: `Pulling ${head} into ${base}`,
            base: base,
            head: head,
            body: pullRequestMessage
        });

        console.log(response)
    })


}

function getChangelog(base, compare) {
    const stdout = execSync(__dirname + `/create-release-notes -g --from ${base}`)

    return `${stdout}`
}

function getCurrentBranch() {
    const stdout = execSync('git branch --show-current')

    // if (stderr !== undefined) {
    //     console.log(`stderr: ${stderr}`);
    //     return 'no branch';
    // }
    return `${stdout}`.replace(/[\r\n]/gm, '')
}
