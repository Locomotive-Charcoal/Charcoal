{{!--
    Permalink Sample
    ================
--}}
<output id="permalink_{{ sampleId }}" class="form-text sample-permalink small" data-spy="#{{ inputId }}">
    <a{{# obj.isActiveRoute }} href="{{ viewLink }}"{{/ obj.isActiveRoute }} target="_blank" class="preview-link">
        <span class="immutable-uri">{{ baseRoute }}</span><strong class="editable-uri">{{ editableRoute }}</strong>
    </a>
    {{# obj.isActiveRoute }}
    <button type="button" class="btn btn-primary btn-sm pull-right" data-permalink-action="copy" id="{{ sampleId }}_copy_permalink" data-toggle="tooltip" data-placement="left" title="{{# _t }}Copy link to clipboard{{/ _t }}">
        <span class="fa fa-clipboard" aria-hidden="true"></span>
        <span class="btn-label sr-only">{{# _t }}Copy To Clipboard{{/ _t }}</span>
    </button>
    {{/ obj.isActiveRoute }}
    <button type="button" class="btn btn-primary btn-sm float-right d-none" data-permalink-action="revert" data-toggle="tooltip" data-placement="left" title="{{# _t }}Revert to the original link{{/ _t }}">{{# _t }}Revert{{/ _t }}</button>
</output>
{{# addJs }}
<script>
$(function() {
    /**
     * Slugifies a string.
     *
     * @link    https://github.com/simov/slugify
     * @author  simov
     * @license MIT
     * @return  callable
     */
    var slugify = (function () {
        var charMap = {
            // latin
            'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE',
            'Ç': 'C', 'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I',
            'Î': 'I', 'Ï': 'I', 'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O',
            'Õ': 'O', 'Ö': 'O', 'Ő': 'O', 'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U',
            'Ü': 'U', 'Ű': 'U', 'Ý': 'Y', 'Þ': 'TH', 'ß': 'ss', 'à': 'a', 'á': 'a',
            'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae', 'ç': 'c', 'è': 'e',
            'é': 'e', 'ê': 'e', 'ë': 'e', 'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i',
            'ð': 'd', 'ñ': 'n', 'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o',
            'ő': 'o', 'ø': 'o', 'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u', 'ű': 'u',
            'ý': 'y', 'þ': 'th', 'ÿ': 'y', 'ẞ': 'SS',
            // greek
            'α': 'a', 'β': 'b', 'γ': 'g', 'δ': 'd', 'ε': 'e', 'ζ': 'z', 'η': 'h', 'θ': '8',
            'ι': 'i', 'κ': 'k', 'λ': 'l', 'μ': 'm', 'ν': 'n', 'ξ': '3', 'ο': 'o', 'π': 'p',
            'ρ': 'r', 'σ': 's', 'τ': 't', 'υ': 'y', 'φ': 'f', 'χ': 'x', 'ψ': 'ps', 'ω': 'w',
            'ά': 'a', 'έ': 'e', 'ί': 'i', 'ό': 'o', 'ύ': 'y', 'ή': 'h', 'ώ': 'w', 'ς': 's',
            'ϊ': 'i', 'ΰ': 'y', 'ϋ': 'y', 'ΐ': 'i',
            'Α': 'A', 'Β': 'B', 'Γ': 'G', 'Δ': 'D', 'Ε': 'E', 'Ζ': 'Z', 'Η': 'H', 'Θ': '8',
            'Ι': 'I', 'Κ': 'K', 'Λ': 'L', 'Μ': 'M', 'Ν': 'N', 'Ξ': '3', 'Ο': 'O', 'Π': 'P',
            'Ρ': 'R', 'Σ': 'S', 'Τ': 'T', 'Υ': 'Y', 'Φ': 'F', 'Χ': 'X', 'Ψ': 'PS', 'Ω': 'W',
            'Ά': 'A', 'Έ': 'E', 'Ί': 'I', 'Ό': 'O', 'Ύ': 'Y', 'Ή': 'H', 'Ώ': 'W', 'Ϊ': 'I',
            'Ϋ': 'Y',
            // turkish
            'ş': 's', 'Ş': 'S', 'ı': 'i', 'İ': 'I', 'ç': 'c', 'Ç': 'C', 'ü': 'u', 'Ü': 'U',
            'ö': 'o', 'Ö': 'O', 'ğ': 'g', 'Ğ': 'G',
            // russian
            'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo', 'ж': 'zh',
            'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o',
            'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c',
            'ч': 'ch', 'ш': 'sh', 'щ': 'sh', 'ъ': 'u', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu',
            'я': 'ya',
            'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo', 'Ж': 'Zh',
            'З': 'Z', 'И': 'I', 'Й': 'J', 'К': 'K', 'Л': 'L', 'М': 'M', 'Н': 'N', 'О': 'O',
            'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U', 'Ф': 'F', 'Х': 'H', 'Ц': 'C',
            'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sh', 'Ъ': 'U', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu',
            'Я': 'Ya',
            // ukranian
            'Є': 'Ye', 'І': 'I', 'Ї': 'Yi', 'Ґ': 'G', 'є': 'ye', 'і': 'i', 'ї': 'yi', 'ґ': 'g',
            // czech
            'č': 'c', 'ď': 'd', 'ě': 'e', 'ň': 'n', 'ř': 'r', 'š': 's', 'ť': 't', 'ů': 'u',
            'ž': 'z', 'Č': 'C', 'Ď': 'D', 'Ě': 'E', 'Ň': 'N', 'Ř': 'R', 'Š': 'S', 'Ť': 'T',
            'Ů': 'U', 'Ž': 'Z',
            // polish
            'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n', 'ó': 'o', 'ś': 's', 'ź': 'z',
            'ż': 'z', 'Ą': 'A', 'Ć': 'C', 'Ę': 'e', 'Ł': 'L', 'Ń': 'N', 'Ś': 'S',
            'Ź': 'Z', 'Ż': 'Z',
            // latvian
            'ā': 'a', 'č': 'c', 'ē': 'e', 'ģ': 'g', 'ī': 'i', 'ķ': 'k', 'ļ': 'l', 'ņ': 'n',
            'š': 's', 'ū': 'u', 'ž': 'z', 'Ā': 'A', 'Č': 'C', 'Ē': 'E', 'Ģ': 'G', 'Ī': 'i',
            'Ķ': 'k', 'Ļ': 'L', 'Ņ': 'N', 'Š': 'S', 'Ū': 'u', 'Ž': 'Z',
            // serbian latin
            'đ': 'dj', 'ǌ': 'nj', 'ǉ': 'lj', 'Đ': 'DJ', 'ǋ': 'NJ', 'ǈ': 'LJ',
            // serbian cyrillic
            'ђ': 'dj', 'ј': 'j', 'љ': 'lj', 'њ': 'nj', 'ћ': 'c', 'џ': 'dz', 'Ђ': 'DJ', 'Ј': 'J',
            'Љ': 'LJ', 'Њ': 'NJ', 'Ћ': 'C', 'Џ': 'DZ',
            // currency
            '€': 'euro', '₢': 'cruzeiro', '₣': 'french franc', '£': 'pound',
            '₤': 'lira', '₥': 'mill', '₦': 'naira', '₧': 'peseta', '₨': 'rupee',
            '₩': 'won', '₪': 'new shequel', '₫': 'dong', '₭': 'kip', '₮': 'tugrik',
            '₯': 'drachma', '₰': 'penny', '₱': 'peso', '₲': 'guarani', '₳': 'austral',
            '₴': 'hryvnia', '₵': 'cedi', '¢': 'cent', '¥': 'yen', '元': 'yuan',
            '円': 'yen', '﷼': 'rial', '₠': 'ecu', '¤': 'currency', '฿': 'baht',
            '$': 'dollar', '₽': 'russian ruble',
            // symbols
            '©': '(c)', 'œ': 'oe', 'Œ': 'OE', '∑': 'sum', '®': '(r)', '†': '+',
            '“': '"', '”': '"', '‘': "'", '’': "'", '∂': 'd', 'ƒ': 'f', '™': 'tm',
            '℠': 'sm', '…': '...', '˚': 'o', 'º': 'o', 'ª': 'a', '•': '*',
            '∆': 'delta', '∞': 'infinity', '♥': 'love', '&': 'and', '|': 'or',
            '<': 'less', '>': 'greater'
        }

        function replace (string, options) {
            options = (typeof options === 'string')
                ? { replacement: options }
                : options || {}

            string = string.split('')
                .reduce(function (result, ch) {
                    if (charMap[ch]) {
                        ch = charMap[ch]
                    }
                    // allowed
                    ch = ch.replace(options.remove || /[^_+~\w\s\$\*\.\(\)\!\-\/]/g, '')
                    result += ch
                    return result
                }, '')
                // trim leading/trailing spaces
                .replace(/^\s+|\s+$/g, '')
                // convert spaces
                .replace(/[-\s]+/g, options.replacement || '-')
                // remove trailing separator
                .replace('#{replacement}$', '')

            return (options.lower === false) ? string : string.toLowerCase()
        }

        replace.extend = function (customMap) {
            for (var key in customMap) {
                charMap[key] = customMap[key]
            }
        }

        return replace
    }());

    var permalinkHandler = function (event) {
        var $control = $(this),
            ctrlVal  = this.value,
            initVal  = $control.data('permalink-init-value'),
            isDirty  = (ctrlVal !== initVal);

        $.each($control.data('permalink-elem-samples'), function ( index, $sample ) {
            var $preview = $sample.data('permalink-elem-preview'),
                $link    = $sample.data('permalink-elem-link'),
                isClean  = $link.data('permalink-is-clean');

            if (ctrlVal === '') {
                $preview.text(initVal);
            } else {
                $preview.text(slugify(ctrlVal));
            }

            if (isDirty && isClean) {
                $link.data('permalink-is-clean', false).removeAttr('href');
            }

            $sample.toggleClass('is-dirty', isDirty);
            $sample.data('permalink-elem-copier').toggleClass('d-none', isDirty);
            $sample.data('permalink-elem-reverter').toggleClass('d-none', !isDirty);
        });
    };

    var revertPermalink = function (event) {
        var $control = $(this).data('permalink-elem-control');

        $control.val($control.data('permalink-init-value'))
                .triggerHandler('change');

        $.each($control.data('permalink-elem-samples'), function ( index, $sample ) {
            var $link = $sample.data('permalink-elem-link');

            $link.attr('href', $link.data('permalink-init-href'))
                 .data('permalink-is-clean', true);
        });
    };

    $('.sample-permalink[data-spy]').each(function () {
        var $sample  = $(this),
            $link    = $sample.find('a.preview-link'),
            $control = $($sample.data('spy')),
            $revert  = $sample.find('[data-permalink-action="revert"]'),
            $copier  = $sample.find('[data-permalink-action="copy"]'),
            $related,
            clipper;

        if ($control.length) {
            var href    = $link.attr('href'),
                isReady = ($control.data('permalink-is-ready') === true);

            $link.data({
                'permalink-is-clean':    true,
                'permalink-elem-sample': $sample,
                'permalink-init-href':   href
            });

            if (href) {
                clipper = new ClipboardJS('#' + $copier.attr('id'), {
                    text: function () {
                        return href;
                    }
                });
                $sample.data('permalink-clipper', clipper);
            }

            $sample.data({
                'permalink-elem-link':     $link,
                'permalink-elem-preview':  $sample.find('.editable-uri'),
                'permalink-elem-reverter': $revert,
                'permalink-elem-copier':   $copier,
                'permalink-elem-control':  $control
            });

            $revert.data({
                'permalink-elem-control': $control
            });

            $revert.on('click.charcoal.permalink', revertPermalink);

            if (!isReady) {
                $control.data({
                    'permalink-is-ready':     true,
                    'permalink-init-value':   $control.val(),
                    'permalink-elem-samples': []
                });

                $control.on('keyup.charcoal.permalink',  permalinkHandler);
                $control.on('change.charcoal.permalink', permalinkHandler);
            }

            /** Broken for l10n permalinks */
            $control.data('permalink-elem-samples').push($sample);
            // if ($control.data('permalink-elem-samples').push($sample) > 1) {
            //     $revert.remove();
            // }
        }
    });
});
</script>
{{/ addJs }}